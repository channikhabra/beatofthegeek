<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | Beat of The Geek]]></title>
  <link href="http://\.github.io/\/github/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://\.github.io/\/github/"/>
  <updated>2014-10-20T10:06:05+05:30</updated>
  <id>http://\.github.io/\/github/</id>
  <author>
    <name><![CDATA[Charanjit Singh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The awesome of web browsing with Emacs]]></title>
    <link href="http://\.github.io/\/github/2014/02/the-awesome-of-web-browsing-with-emacs.html"/>
    <updated>2014-02-19T00:00:00+05:30</updated>
    <id>http://\.github.io/\/github/2014/02/the-awesome-of-web-browsing-with-emacs</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Emacs is awesome. There is a kinda steep learning curve for new comers, which I think is the reason it's not popular among most new-techies. But once you've got over that, it's all hugs and kisses. <br /><br />Emacs is addictive. You get addicted to it. Addicted to its power, to its flexibility, and if nothing else, it's keyboard shortcuts. This addiction result in browser extensions like <a href="https://addons.mozilla.org/en-US/firefox/addon/firemacs/" target="_blank">firemacs</a> ), (you should definitely try it if you are an emacs user), which adds emacs shortcuts to Firefox (another awesome piece of technology).<br /><br /><!-- more --><br /><br />But there is another level of addiction. When you want to do everything you do on computer from within Emacs. And Emacs won't complaint, or get in your way. It's a freaking <a href="http://c2.com/cgi/wiki?EmacsAsOperatingSystem" target="_blank">operating system in itself</a>. People are <a href="http://www.informatimago.com/linux/emacs-on-user-mode-linux.html" target="_blank">doing crazy things with it</a>. <br /><br />I am here to share my experience of using Emacs as my primary web browser for quite some time now.<br /><br />For about a month, I am in a situation in which I am on very expensive (for my unemployed soul) Internet connection, and can't afford to waste any bandwidth. Every MB matters. Firefox was consuming a lot of bandwidth for downloading all those images, js, and css I don't care about most of the time. All I wanted from Internet was text. So I turned towards command line web-browsers. By instinct I looked for <a href="http://www.google.com/search?btnI=I%%27m+Feeling+Lucky&amp;ie=UTF-8&amp;oe=UTF-8&amp;q=Emacs+as+a+web+browser" target="_blank">options in Emacs as a web browser</a>. There are many. I chose <a href="http://emacs-w3m.namazu.org/" target="_blank">emacs-w3m</a>.<br /><br />Now I am fond of it. Many good things I've got out of using emacs as my web browser.<br /><br /><h3 style="text-align: left;">It feels good</h3><div style="text-align: left;">It feels great actually. I don't know what it is there in it, but using Emacs feels like being at home. An easy and relaxed feeling. I am a knowledge hungry maniac, so the ability to browser information, and summarize and store it from within the same familiar ecosystem added another level of ease. This kind of mental ease really matter when throw all sort of <a href="https://github.com/gulpjs/gulp" target="_blank">new technologies</a> on yourself everyday.</div><div style="text-align: left;"><br /></div><h3 style="text-align: left;">Distraction free</h3><div style="text-align: left;">I feel it much more focused when reading text in Emacs. I realized it first time while reading emacs-lisp-intro, <a href="http://channikhabra.github.io/2013/10/11/the-most-beautiful-tutorial/" target="_blank">the most beautiful tutorial</a> ever imo. I think there are two main reason for this. </div><div style="text-align: left;"><br />First is the absence of all those fancy graphics (images, fonts, styles etc) that you awe on modern web pages. If you are actually after the information, believe me you won't miss an ounce of them. </div><div style="text-align: left;"><br />Second reason I think is the habit. My mind is trained to focus on code (that's what we use Emacs for, remember?) in Emacs. It might be the environment that increase the focus level by magnitude when am reading something inside Emacs. </div><div style="text-align: left;"><br /></div><h3 style="text-align: left;">Ad blocking by default</h3><div style="text-align: left;">That's obvious. No Javascript, no images, No ads. No need to install ad-block plus and feel bad for publishers. Please note that this certainly does not mean that you can't view images in Emacs. It's an opt-in option in emacs-w3m (which of course can be toggled globally to display images by default).</div><div style="text-align: left;"><br /></div><h3 style="text-align: left;">It made me a Better Blogger</h3><div style="text-align: left;">I like writing. I have been running this blog since 2011, but wrote like 10 posts in 2 years. It started changing when I started using org-mode in Emacs for taking notes about literally everything. And web browsing from within Emacs made it even easier to write. For a pro-level procrastinator like me, even a press of `alt+Tab` is enough of an excuse to not write. </div><div style="text-align: left;"><br />I believe it is not pressing `alt+Tab`. It's change of context that happen when switching windows (Firefox to Emacs). Many things flush out of head when I actually reach to Emacs from Firefox. It got resolved with using Emacs as web browser. </div><div style="text-align: left;"><br />It also boosted my habit of note making. A simple `C-x 3` and `C-x o` made a lot of difference.</div><div style="text-align: left;"><br />Actually I believe it's <a href="http://orgmode.org/" target="_blank">org-mode</a> which is responsible for my better blogging habits. Earlier I had to sit down and start writing a post; now I switch to my notes.org and search for which of the org nodes can be turned into blog posts. emacs-w3m sure increased the size of my notes file though.</div><div style="text-align: left;">Please also read about <a href="http://www.beatofthegeek.com/2014/02/my-setup-for-using-emacs-as-web-browser.html" target="_blank">my setup for using emacs as web browser</a>.</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ My setup for using Emacs as web browser]]></title>
    <link href="http://\.github.io/\/github/2014/02/my-setup-for-using-emacs-as-web-browser.html"/>
    <updated>2014-02-19T00:00:00+05:30</updated>
    <id>http://\.github.io/\/github/2014/02/my-setup-for-using-emacs-as-web-browser</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">This post was actually a part of the <a href="http://www.beatofthegeek.com/2014/02/the-awesome-of-web-browsing-with-emacs.html" target="_blank">last one</a>, but the node was long enough so I broke it into two. Why? Well, why making it one post when I can make them two? To save users a click and a page load (I know some UX) of course, but I also have to convince ever self-criticizing brain that I am justifying with my blog and not slacking off.<br /><br />So here's my setup for using Emacs as a web browser. <br /><br /><!-- more --><br /><br /><h3 style="text-align: left;">w3m as web browser</h3><div style="text-align: left;">I use emacs-w3m as for web browsing from inside emacs. It's awesome. For using emacs-w3m from inside Emacs, it's required to first install <a href="http://w3m.sourceforge.net/" target="_blank">w3m</a>. w3m is actually a text based browser which can be used from command line (like <a href="http://lynx.isc.org/" target="_blank">lynx</a>. So we gotta install it first.&nbsp;</div><div style="text-align: left;"><br /></div><div style="text-align: left;">Depending on your GNU/Linux distribution, run appropriate command to install w3m</div><div style="text-align: left;"><br /></div><blockquote class="tr_bq"><b>Ubuntu</b><br /><i>sudo apt-get install w3m</i><br /><b>Fedora </b><br /><i>sudo yum install w3m</i></blockquote><div style="text-align: left;">I used `pacman -S w3m` (<a href="http://chakra-linux.org/" target="_blank">Chakra</a>). </div><div style="text-align: left;"><br /></div><h3 style="text-align: left;">emacs-w3m in emacs</h3><div style="text-align: left;">Then of course we need emacs-w3m install in emacs. Do `package-install w3m` from within Emacs.</div><div style="text-align: left;"><br /></div><h3 style="text-align: left;">My setup</h3><div style="text-align: left;">Here's my setup for customizing web browsing in Emacs. Explanation follows.</div><div style="text-align: left;"></div><div style="text-align: left;"></div><div style="text-align: left;"></div><div style="text-align: left;"><br /></div><div style="text-align: left;"><script src="https://gist.github.com/channikhabra/ab9349d58f052a712a40.js"></script><br /></div><blockquote class="tr_bq">(setq browse-url-browser-function 'w3m-goto-url-new-session)</blockquote><div style="text-align: left;">This line sets Emacs' default browser for visiting web pages to w3m function w3m-goto-url-new-session.</div><div style="text-align: left;"><br />This would open a new tab (if you want to call that) for the url to be visited.</div><div style="text-align: left;"><br /></div><blockquote class="tr_bq">(setq w3m-user-agent "Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC_Pyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.")</blockquote><div style="text-align: left;"><br />This line sets the user-agent string which w3m will use. It really helps to use a mobile user-agent as many sites provide small content centric versions of their websites for mobiles. Most desktop sites in w3m come up with a huge untitled list covering the whole screen.</div><blockquote class="tr_bq">(defun hn ()<br />&nbsp; (interactive)<br />&nbsp; (browse-url "http://news.ycombinator.com"))</blockquote><div style="text-align: left;"><br />This creates a quick interactive function for quickly visiting <a href="http://news.ycombinator.com/" target="_blank">hacker news</a> with `M-x "hn"`</div><blockquote class="tr_bq">(defun reddit (reddit)<br />&nbsp; "Opens the REDDIT in w3m-new-session"<br />&nbsp; (interactive (list<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (read-string "Enter the reddit (default: psycology): " nil nil "psychology" nil)))<br />&nbsp; (browse-url (format "http://m.reddit.com/r/%s" reddit))<br />&nbsp; )</blockquote><div style="text-align: left;"><br />Another function like above for going to reddit. It opens up mobile reddit site with provided subreddit name. This one prompts for entering a reddit name to visit, and if none is provided <a href="http://reddit.com/r/psychology" target="_blank">/r/psychology</a> is visited by default. You can change it to any of the subreddits.</div><blockquote class="tr_bq">(defun wikipedia-search (search-term)<br />&nbsp; "Search for SEARCH-TERM on wikipedia"<br />&nbsp; (interactive<br />&nbsp;&nbsp; (let ((term (if mark-active<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (buffer-substring (region-beginning) (region-end))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (word-at-point))))<br />&nbsp;&nbsp;&nbsp;&nbsp; (list<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (read-string<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (format "Wikipedia (%s):" term) nil nil term)))<br />&nbsp;&nbsp; )<br />&nbsp; (browse-url<br />&nbsp;&nbsp; (concat<br />&nbsp;&nbsp;&nbsp; "http://en.m.wikipedia.org/w/index.php?search="<br />&nbsp;&nbsp;&nbsp; search-term<br />&nbsp;&nbsp;&nbsp; ))<br />&nbsp; )</blockquote><br /><div style="text-align: left;">As I've told earlier, I am an information maniac. I just need to know everything feasible about everything new I meet. And wikipedia is a nice quick thing for solid information. When called it will prompt for entering a search term, with the word under cursor as default. It then makes a search on Wikipedia for the given search term.</div><div style="text-align: left;"><br />You can set to a keyboard shortcut if you want. I use it with `M-x wik...` only.</div><div style="text-align: left;"><br /></div><blockquote class="tr_bq">(defun w3m-open-site (site)<br />&nbsp; "Opens site in new w3m session with 'http://' appended"<br />&nbsp; (interactive<br />&nbsp;&nbsp; (list (read-string "Enter website address(default: w3m-home):" nil nil w3m-home-page nil )))<br />&nbsp; (w3m-goto-url-new-session<br />&nbsp;&nbsp; (concat "http://" site)))</blockquote><div style="text-align: left;"><br /></div><div style="text-align: left;">This adds another extra interactive function 'w3m-open-site. When we enter a url in w3m-goto-url or w3m-goto-url-new-session, it expects full url with 'http://' in front. So this one just appends 'http://' in front of a website url you provide.</div><div style="text-align: left;"><br /></div><h3 style="text-align: left;">Some tips</h3><div style="text-align: left;">Here are some extra tips for using emacs-w3m as web browser.</div><h4 style="text-align: left;">Different keyboard shortcuts</h4><div style="text-align: left;">W3m has its own keyboard shortcuts. Here are some I use most</div><div style="text-align: left;"><br /></div><div style="text-align: left;"><b>Navigation</b></div><div style="text-align: left;">We can use standard Emacs controls for moving cursor (C-n, C-p, C-f, C-b) as well as Vim's (g,h,j,k). Vim's controls are really handy when you need to move cursor with one hand.</div><div style="text-align: left;"><br /><b>Jumping to links</b><br />Tab will go you to next link. `Shift-Tab` to previous</div><div style="text-align: left;"><br /><b>Visiting different tabs</b><br />w3m has tabs like system. You can easily change tabs (buffers) with Emacs' standard `C-x b` or use `C-n` for next tab and `C-p` for previous tab.</div><div style="text-align: left;"><br /><b>Open link in new tab</b><br />Just entering `G` will do the job. It will prompt for a url with the url under cursor as default.</div><div style="text-align: left;"><br /><b>Open link in same tab/buffer</b><br />`g` works similar to `G` but opens url in current tab only.</div><div style="text-align: left;"><br /><b>Go to previous page</b><br />`B` will act as 'Back' button of standard browsers</div><div style="text-align: left;"><br /><b>Toggle visibility of image under cursor</b><br />`t` shows or hides an image under cursor</div><div style="text-align: left;"><br /><b>Toggle visibility of all images on page</b><br />`T`</div><div style="text-align: left;"><br /><b>Download url under point</b><br />`d`</div><div style="text-align: left;"><br /><b>Move to next form field</b><br />`]`</div><div style="text-align: left;"><b>Move to previous form field </b><br />`[`</div><div style="text-align: left;"><br />There are so many more I don't use. You can check all special shortcuts provided by w3m in the mode help menu. In a w3m buffer, press `C-h m` to access the help buffer.</div><div style="text-align: left;"></div><div style="text-align: left;"><br /></div><h4 style="text-align: left;">Submitting forms</h4><div style="text-align: left;">We sometime need to submit forms, like for google search, or making comment somewhere. You can step in a form by pressing 'Return' and enter text in minibuffer. The form can then be submitted with 'C-c C-c'.</div><div style="text-align: left;"><br /></div><h4 style="text-align: left;">Google search</h4><div style="text-align: left;">You can simply use 'w3m-goto-url' or 'w3m-goto-url-new-session' for Google search. That's the default action. When we enter something which is not a standard url, it will open the Google search for that string with 'feeling lucky' set.</div><div style="text-align: left;"><br /><h3 style="text-align: left;">w3m-lnum-mode</h3><div style="text-align: left;">Thanks to Ben Chen (from <a href="https://plus.google.com/103163143282947229395/posts/A2GDPQcX68C" target="_blank">G+</a>) for this tip. I didn't know about it. Activating w3m-lnum-mode minor mode when web browsing with w3m adds ace-jump-mode like navigation to the buffer. We can just press 'f' and the all the links and forms on the page become accessible by entering numbers. This can be really handy for quick navigation. Although I think I'll stick with <a href="https://github.com/winterTTr/ace-jump-mode" target="_blank">ace-jump-mode</a>.</div><br />That's all I can recall at the moment. Please share your views (good or bad) in comments. I'll highly appreciate every word from you.</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some tips for developing Firefox Extensions in Emacs]]></title>
    <link href="http://\.github.io/\/github/2014/02/some-tips-for-developing-firefox.html"/>
    <updated>2014-02-13T00:00:00+05:30</updated>
    <id>http://\.github.io/\/github/2014/02/some-tips-for-developing-firefox</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">I used <a href="https://developer.mozilla.org/en-US/Add-ons/SDK" target="_blank">addon-sdk</a> to create <a href="https://addons.mozilla.org/en-US/firefox/addon/fireword-gen/" target="_blank">my simple firefox addon</a>. It makes really easy to create firefox addon by avoiding writing boilerplate code and provides a simple Javascript api for some functionality of Firefox. <br /><br /><a name='more'></a><br /><br />Addon-sdk do makes things easier but the workflow is still not as&nbsp; straightforward as that of developing Chrome extensions. In chrome, we can load unpackaged extensions which are just folders containing a simple HTML app and a manifest.json. In case of Firefox addons, we need to first<br /><ul style="text-align: left;"><li>build a firefox extension from within the folder containing the code with 'cfx xpi' (command provided by addon-sdk)</li><li>then run a Firefox instance with 'cfx run'</li></ul>We need to do this every time we make any change in the addon code. Sounds<br />gross right? It is indeed gross.<br /><br />To make things simpler, there's an addon in Firefox marketplace called '<a href="https://addons.mozilla.org/en-US/firefox/addon/autoinstaller/" target="_blank">auto-installer</a>' which allow us to install addons on the fly. This is highly recommended if you are going to develop a firefox addon.<br />Here's a <a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Tutorials/Installation" target="_blank">great tutorial on Firefox Developers Network</a> for installing and using addon-sdk.<br />So when developing a new Firefox addon, things should go in a flow similar to this.<br /><br /><h3 style="text-align: left;">Install Auto-installer addon in Firefox</h3>This addon allow pushing the addon we are developing to Firefox on the fly, without the need to do something like 'cfx run' over and over again. <br /><ul style="text-align: left;"><li>It need us to build the addon (cfx xpi), and send it inside a HTTP POST request to localhost:8888</li></ul><ul style="text-align: left;"><li>It then reinstall the addon on the running Firefox instance</li></ul><ul style="text-align: left;"><li>It identifies the addon by its 'id' we define in 'package.json' file. So if we change the 'id' there, a new copy of our addon will get installed along with previously installed file.</li></ul>This make things specially easy with Emacs, see next point.<br /><h4 style="text-align: left;">How to use</h4><ul style="text-align: left;"><li>Install auto-installer on a Firefox instance (may be with a different profile than your default profile (firefox -ProfileManager))</li></ul><ul style="text-align: left;"><li>Build the addon<br /><blockquote class="tr_bq">cfx xpi</blockquote></li></ul><ul style="text-align: left;"><li>Post it to localhost:8888. e.g with<br /><blockquote class="tr_bq">wget --post-file=myAddon.xpi http://localhost:8888/</blockquote></li></ul><ul style="text-align: left;"><li>Done</li></ul>In the article on Firefox developers hub, they suggest following command which I found not very good.<br /><blockquote class="tr_bq">while true ; do cfx xpi ; wget --post-file=codesy.xpi http://localhost:8888/ ; sleep 5 ; done</blockquote>Above command builds a Firefox xpi addon from our source code every 5 seconds, and push it to the Firefox instance. It's annoying in its own right.<br /><br /><h3 style="text-align: left;">Install '<a href="https://github.com/nschum/compile-bookmarks.el" target="_blank">compile-bookmarks</a>' in Emacs</h3>This package allow keeping 'compile' commands like bookmarks, and executing them with keyboard shortcuts. It's more useful than one might think at first. I do all sort of tasks as compile-commands in Emacs like running unit-tests.<br /><br />Create a bookmark with a compile command like following:<br /><blockquote class="tr_bq">/path/to/firefox-addon-sdk/bin/cfx xpi &amp;&amp; wget --post-file=myAddon.xpi http://localhost:8888/</blockquote>When we provide complete path of the 'cfx' command, we don't need to activate the 'virtualenv'. <br /><br />You can do this by<br /><ul style="text-align: left;"><li>run 'compile' function (M-x compile)</li></ul><ul style="text-align: left;"><li>execute above mentioned command from mini-buffer<br />&nbsp;</li><li>Select 'add' from 'compile' menu. The command you used previously for compiling will appear there, select it</li></ul><ul style="text-align: left;"><li>It will then prompt in mini-buffer for a key to use for compiling with above command</li></ul><ul style="text-align: left;"><li>Choose whichever seem right to you. I have chosen 'f' for this.</li></ul>You can now run build and install your extension in firefox with keys 'C-` f'.<br /><br />This was the workflow I came up with developing my one firefox addon. I would love to hear how experts do things. If you have time, please tell in comments your way of doing things.</div></div>

]]></content>
  </entry>
  
</feed>

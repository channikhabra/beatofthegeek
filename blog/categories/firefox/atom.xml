<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: firefox | Beat of The Geek]]></title>
  <link href="http://beatofthegeek.com/blog/categories/firefox/atom.xml" rel="self"/>
  <link href="http://beatofthegeek.com/"/>
  <updated>2014-02-20T17:47:08+05:30</updated>
  <id>http://beatofthegeek.com/</id>
  <author>
    <name><![CDATA[Charanjit Singh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some tips for developing Firefox Extensions in Emacs]]></title>
    <link href="http://beatofthegeek.com/2014/02/some-tips-for-developing-firefox.html"/>
    <updated>2014-02-13T00:00:00+05:30</updated>
    <id>http://beatofthegeek.com/2014/02/some-tips-for-developing-firefox</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">I used <a href="https://developer.mozilla.org/en-US/Add-ons/SDK" target="_blank">addon-sdk</a> to create <a href="https://addons.mozilla.org/en-US/firefox/addon/fireword-gen/" target="_blank">my simple firefox addon</a>. It makes really easy to create firefox addon by avoiding writing boilerplate code and provides a simple Javascript api for some functionality of Firefox. <br /><br /><a name='more'></a><br /><br />Addon-sdk do makes things easier but the workflow is still not as&nbsp; straightforward as that of developing Chrome extensions. In chrome, we can load unpackaged extensions which are just folders containing a simple HTML app and a manifest.json. In case of Firefox addons, we need to first<br /><ul style="text-align: left;"><li>build a firefox extension from within the folder containing the code with 'cfx xpi' (command provided by addon-sdk)</li><li>then run a Firefox instance with 'cfx run'</li></ul>We need to do this every time we make any change in the addon code. Sounds<br />gross right? It is indeed gross.<br /><br />To make things simpler, there's an addon in Firefox marketplace called '<a href="https://addons.mozilla.org/en-US/firefox/addon/autoinstaller/" target="_blank">auto-installer</a>' which allow us to install addons on the fly. This is highly recommended if you are going to develop a firefox addon.<br />Here's a <a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Tutorials/Installation" target="_blank">great tutorial on Firefox Developers Network</a> for installing and using addon-sdk.<br />So when developing a new Firefox addon, things should go in a flow similar to this.<br /><br /><h3 style="text-align: left;">Install Auto-installer addon in Firefox</h3>This addon allow pushing the addon we are developing to Firefox on the fly, without the need to do something like 'cfx run' over and over again. <br /><ul style="text-align: left;"><li>It need us to build the addon (cfx xpi), and send it inside a HTTP POST request to localhost:8888</li></ul><ul style="text-align: left;"><li>It then reinstall the addon on the running Firefox instance</li></ul><ul style="text-align: left;"><li>It identifies the addon by its 'id' we define in 'package.json' file. So if we change the 'id' there, a new copy of our addon will get installed along with previously installed file.</li></ul>This make things specially easy with Emacs, see next point.<br /><h4 style="text-align: left;">How to use</h4><ul style="text-align: left;"><li>Install auto-installer on a Firefox instance (may be with a different profile than your default profile (firefox -ProfileManager))</li></ul><ul style="text-align: left;"><li>Build the addon<br /><blockquote class="tr_bq">cfx xpi</blockquote></li></ul><ul style="text-align: left;"><li>Post it to localhost:8888. e.g with<br /><blockquote class="tr_bq">wget --post-file=myAddon.xpi http://localhost:8888/</blockquote></li></ul><ul style="text-align: left;"><li>Done</li></ul>In the article on Firefox developers hub, they suggest following command which I found not very good.<br /><blockquote class="tr_bq">while true ; do cfx xpi ; wget --post-file=codesy.xpi http://localhost:8888/ ; sleep 5 ; done</blockquote>Above command builds a Firefox xpi addon from our source code every 5 seconds, and push it to the Firefox instance. It's annoying in its own right.<br /><br /><h3 style="text-align: left;">Install '<a href="https://github.com/nschum/compile-bookmarks.el" target="_blank">compile-bookmarks</a>' in Emacs</h3>This package allow keeping 'compile' commands like bookmarks, and executing them with keyboard shortcuts. It's more useful than one might think at first. I do all sort of tasks as compile-commands in Emacs like running unit-tests.<br /><br />Create a bookmark with a compile command like following:<br /><blockquote class="tr_bq">/path/to/firefox-addon-sdk/bin/cfx xpi &amp;&amp; wget --post-file=myAddon.xpi http://localhost:8888/</blockquote>When we provide complete path of the 'cfx' command, we don't need to activate the 'virtualenv'. <br /><br />You can do this by<br /><ul style="text-align: left;"><li>run 'compile' function (M-x compile)</li></ul><ul style="text-align: left;"><li>execute above mentioned command from mini-buffer<br />&nbsp;</li><li>Select 'add' from 'compile' menu. The command you used previously for compiling will appear there, select it</li></ul><ul style="text-align: left;"><li>It will then prompt in mini-buffer for a key to use for compiling with above command</li></ul><ul style="text-align: left;"><li>Choose whichever seem right to you. I have chosen 'f' for this.</li></ul>You can now run build and install your extension in firefox with keys 'C-` f'.<br /><br />This was the workflow I came up with developing my one firefox addon. I would love to hear how experts do things. If you have time, please tell in comments your way of doing things.</div></div>

]]></content>
  </entry>
  
</feed>

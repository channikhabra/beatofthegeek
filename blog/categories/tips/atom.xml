<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | Beat of The Geek]]></title>
  <link href="http://\.github.io/\/github/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://\.github.io/\/github/"/>
  <updated>2015-11-04T07:55:44+05:30</updated>
  <id>http://\.github.io/\/github/</id>
  <author>
    <name><![CDATA[Charanjit Singh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ My setup for using Emacs as web browser]]></title>
    <link href="http://\.github.io/\/github/2014/02/my-setup-for-using-emacs-as-web-browser.html"/>
    <updated>2014-02-19T00:00:00+05:30</updated>
    <id>http://\.github.io/\/github/2014/02/my-setup-for-using-emacs-as-web-browser</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">This post was actually a part of the <a href="http://www.beatofthegeek.com/2014/02/the-awesome-of-web-browsing-with-emacs.html" target="_blank">last one</a>, but the node was long enough so I broke it into two. Why? Well, why making it one post when I can make them two? To save users a click and a page load (I know some UX) of course, but I also have to convince ever self-criticizing brain that I am justifying with my blog and not slacking off.<br /><br />So here's my setup for using Emacs as a web browser. <br /><br /><!-- more --><br /><br /><h3 style="text-align: left;">w3m as web browser</h3><div style="text-align: left;">I use emacs-w3m as for web browsing from inside emacs. It's awesome. For using emacs-w3m from inside Emacs, it's required to first install <a href="http://w3m.sourceforge.net/" target="_blank">w3m</a>. w3m is actually a text based browser which can be used from command line (like <a href="http://lynx.isc.org/" target="_blank">lynx</a>. So we gotta install it first.&nbsp;</div><div style="text-align: left;"><br /></div><div style="text-align: left;">Depending on your GNU/Linux distribution, run appropriate command to install w3m</div><div style="text-align: left;"><br /></div><blockquote class="tr_bq"><b>Ubuntu</b><br /><i>sudo apt-get install w3m</i><br /><b>Fedora </b><br /><i>sudo yum install w3m</i></blockquote><div style="text-align: left;">I used `pacman -S w3m` (<a href="http://chakra-linux.org/" target="_blank">Chakra</a>). </div><div style="text-align: left;"><br /></div><h3 style="text-align: left;">emacs-w3m in emacs</h3><div style="text-align: left;">Then of course we need emacs-w3m install in emacs. Do `package-install w3m` from within Emacs.</div><div style="text-align: left;"><br /></div><h3 style="text-align: left;">My setup</h3><div style="text-align: left;">Here's my setup for customizing web browsing in Emacs. Explanation follows.</div><div style="text-align: left;"></div><div style="text-align: left;"></div><div style="text-align: left;"></div><div style="text-align: left;"><br /></div><div style="text-align: left;"><script src="https://gist.github.com/channikhabra/ab9349d58f052a712a40.js"></script><br /></div><blockquote class="tr_bq">(setq browse-url-browser-function 'w3m-goto-url-new-session)</blockquote><div style="text-align: left;">This line sets Emacs' default browser for visiting web pages to w3m function w3m-goto-url-new-session.</div><div style="text-align: left;"><br />This would open a new tab (if you want to call that) for the url to be visited.</div><div style="text-align: left;"><br /></div><blockquote class="tr_bq">(setq w3m-user-agent "Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC_Pyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.")</blockquote><div style="text-align: left;"><br />This line sets the user-agent string which w3m will use. It really helps to use a mobile user-agent as many sites provide small content centric versions of their websites for mobiles. Most desktop sites in w3m come up with a huge untitled list covering the whole screen.</div><blockquote class="tr_bq">(defun hn ()<br />&nbsp; (interactive)<br />&nbsp; (browse-url "http://news.ycombinator.com"))</blockquote><div style="text-align: left;"><br />This creates a quick interactive function for quickly visiting <a href="http://news.ycombinator.com/" target="_blank">hacker news</a> with `M-x "hn"`</div><blockquote class="tr_bq">(defun reddit (reddit)<br />&nbsp; "Opens the REDDIT in w3m-new-session"<br />&nbsp; (interactive (list<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (read-string "Enter the reddit (default: psycology): " nil nil "psychology" nil)))<br />&nbsp; (browse-url (format "http://m.reddit.com/r/%s" reddit))<br />&nbsp; )</blockquote><div style="text-align: left;"><br />Another function like above for going to reddit. It opens up mobile reddit site with provided subreddit name. This one prompts for entering a reddit name to visit, and if none is provided <a href="http://reddit.com/r/psychology" target="_blank">/r/psychology</a> is visited by default. You can change it to any of the subreddits.</div><blockquote class="tr_bq">(defun wikipedia-search (search-term)<br />&nbsp; "Search for SEARCH-TERM on wikipedia"<br />&nbsp; (interactive<br />&nbsp;&nbsp; (let ((term (if mark-active<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (buffer-substring (region-beginning) (region-end))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (word-at-point))))<br />&nbsp;&nbsp;&nbsp;&nbsp; (list<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (read-string<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (format "Wikipedia (%s):" term) nil nil term)))<br />&nbsp;&nbsp; )<br />&nbsp; (browse-url<br />&nbsp;&nbsp; (concat<br />&nbsp;&nbsp;&nbsp; "http://en.m.wikipedia.org/w/index.php?search="<br />&nbsp;&nbsp;&nbsp; search-term<br />&nbsp;&nbsp;&nbsp; ))<br />&nbsp; )</blockquote><br /><div style="text-align: left;">As I've told earlier, I am an information maniac. I just need to know everything feasible about everything new I meet. And wikipedia is a nice quick thing for solid information. When called it will prompt for entering a search term, with the word under cursor as default. It then makes a search on Wikipedia for the given search term.</div><div style="text-align: left;"><br />You can set to a keyboard shortcut if you want. I use it with `M-x wik...` only.</div><div style="text-align: left;"><br /></div><blockquote class="tr_bq">(defun w3m-open-site (site)<br />&nbsp; "Opens site in new w3m session with 'http://' appended"<br />&nbsp; (interactive<br />&nbsp;&nbsp; (list (read-string "Enter website address(default: w3m-home):" nil nil w3m-home-page nil )))<br />&nbsp; (w3m-goto-url-new-session<br />&nbsp;&nbsp; (concat "http://" site)))</blockquote><div style="text-align: left;"><br /></div><div style="text-align: left;">This adds another extra interactive function 'w3m-open-site. When we enter a url in w3m-goto-url or w3m-goto-url-new-session, it expects full url with 'http://' in front. So this one just appends 'http://' in front of a website url you provide.</div><div style="text-align: left;"><br /></div><h3 style="text-align: left;">Some tips</h3><div style="text-align: left;">Here are some extra tips for using emacs-w3m as web browser.</div><h4 style="text-align: left;">Different keyboard shortcuts</h4><div style="text-align: left;">W3m has its own keyboard shortcuts. Here are some I use most</div><div style="text-align: left;"><br /></div><div style="text-align: left;"><b>Navigation</b></div><div style="text-align: left;">We can use standard Emacs controls for moving cursor (C-n, C-p, C-f, C-b) as well as Vim's (g,h,j,k). Vim's controls are really handy when you need to move cursor with one hand.</div><div style="text-align: left;"><br /><b>Jumping to links</b><br />Tab will go you to next link. `Shift-Tab` to previous</div><div style="text-align: left;"><br /><b>Visiting different tabs</b><br />w3m has tabs like system. You can easily change tabs (buffers) with Emacs' standard `C-x b` or use `C-n` for next tab and `C-p` for previous tab.</div><div style="text-align: left;"><br /><b>Open link in new tab</b><br />Just entering `G` will do the job. It will prompt for a url with the url under cursor as default.</div><div style="text-align: left;"><br /><b>Open link in same tab/buffer</b><br />`g` works similar to `G` but opens url in current tab only.</div><div style="text-align: left;"><br /><b>Go to previous page</b><br />`B` will act as 'Back' button of standard browsers</div><div style="text-align: left;"><br /><b>Toggle visibility of image under cursor</b><br />`t` shows or hides an image under cursor</div><div style="text-align: left;"><br /><b>Toggle visibility of all images on page</b><br />`T`</div><div style="text-align: left;"><br /><b>Download url under point</b><br />`d`</div><div style="text-align: left;"><br /><b>Move to next form field</b><br />`]`</div><div style="text-align: left;"><b>Move to previous form field </b><br />`[`</div><div style="text-align: left;"><br />There are so many more I don't use. You can check all special shortcuts provided by w3m in the mode help menu. In a w3m buffer, press `C-h m` to access the help buffer.</div><div style="text-align: left;"></div><div style="text-align: left;"><br /></div><h4 style="text-align: left;">Submitting forms</h4><div style="text-align: left;">We sometime need to submit forms, like for google search, or making comment somewhere. You can step in a form by pressing 'Return' and enter text in minibuffer. The form can then be submitted with 'C-c C-c'.</div><div style="text-align: left;"><br /></div><h4 style="text-align: left;">Google search</h4><div style="text-align: left;">You can simply use 'w3m-goto-url' or 'w3m-goto-url-new-session' for Google search. That's the default action. When we enter something which is not a standard url, it will open the Google search for that string with 'feeling lucky' set.</div><div style="text-align: left;"><br /><h3 style="text-align: left;">w3m-lnum-mode</h3><div style="text-align: left;">Thanks to Ben Chen (from <a href="https://plus.google.com/103163143282947229395/posts/A2GDPQcX68C" target="_blank">G+</a>) for this tip. I didn't know about it. Activating w3m-lnum-mode minor mode when web browsing with w3m adds ace-jump-mode like navigation to the buffer. We can just press 'f' and the all the links and forms on the page become accessible by entering numbers. This can be really handy for quick navigation. Although I think I'll stick with <a href="https://github.com/winterTTr/ace-jump-mode" target="_blank">ace-jump-mode</a>.</div><br />That's all I can recall at the moment. Please share your views (good or bad) in comments. I'll highly appreciate every word from you.</div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some tips for developing Firefox Extensions in Emacs]]></title>
    <link href="http://\.github.io/\/github/2014/02/some-tips-for-developing-firefox.html"/>
    <updated>2014-02-13T00:00:00+05:30</updated>
    <id>http://\.github.io/\/github/2014/02/some-tips-for-developing-firefox</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">I used <a href="https://developer.mozilla.org/en-US/Add-ons/SDK" target="_blank">addon-sdk</a> to create <a href="https://addons.mozilla.org/en-US/firefox/addon/fireword-gen/" target="_blank">my simple firefox addon</a>. It makes really easy to create firefox addon by avoiding writing boilerplate code and provides a simple Javascript api for some functionality of Firefox. <br /><br /><a name='more'></a><br /><br />Addon-sdk do makes things easier but the workflow is still not as&nbsp; straightforward as that of developing Chrome extensions. In chrome, we can load unpackaged extensions which are just folders containing a simple HTML app and a manifest.json. In case of Firefox addons, we need to first<br /><ul style="text-align: left;"><li>build a firefox extension from within the folder containing the code with 'cfx xpi' (command provided by addon-sdk)</li><li>then run a Firefox instance with 'cfx run'</li></ul>We need to do this every time we make any change in the addon code. Sounds<br />gross right? It is indeed gross.<br /><br />To make things simpler, there's an addon in Firefox marketplace called '<a href="https://addons.mozilla.org/en-US/firefox/addon/autoinstaller/" target="_blank">auto-installer</a>' which allow us to install addons on the fly. This is highly recommended if you are going to develop a firefox addon.<br />Here's a <a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Tutorials/Installation" target="_blank">great tutorial on Firefox Developers Network</a> for installing and using addon-sdk.<br />So when developing a new Firefox addon, things should go in a flow similar to this.<br /><br /><h3 style="text-align: left;">Install Auto-installer addon in Firefox</h3>This addon allow pushing the addon we are developing to Firefox on the fly, without the need to do something like 'cfx run' over and over again. <br /><ul style="text-align: left;"><li>It need us to build the addon (cfx xpi), and send it inside a HTTP POST request to localhost:8888</li></ul><ul style="text-align: left;"><li>It then reinstall the addon on the running Firefox instance</li></ul><ul style="text-align: left;"><li>It identifies the addon by its 'id' we define in 'package.json' file. So if we change the 'id' there, a new copy of our addon will get installed along with previously installed file.</li></ul>This make things specially easy with Emacs, see next point.<br /><h4 style="text-align: left;">How to use</h4><ul style="text-align: left;"><li>Install auto-installer on a Firefox instance (may be with a different profile than your default profile (firefox -ProfileManager))</li></ul><ul style="text-align: left;"><li>Build the addon<br /><blockquote class="tr_bq">cfx xpi</blockquote></li></ul><ul style="text-align: left;"><li>Post it to localhost:8888. e.g with<br /><blockquote class="tr_bq">wget --post-file=myAddon.xpi http://localhost:8888/</blockquote></li></ul><ul style="text-align: left;"><li>Done</li></ul>In the article on Firefox developers hub, they suggest following command which I found not very good.<br /><blockquote class="tr_bq">while true ; do cfx xpi ; wget --post-file=codesy.xpi http://localhost:8888/ ; sleep 5 ; done</blockquote>Above command builds a Firefox xpi addon from our source code every 5 seconds, and push it to the Firefox instance. It's annoying in its own right.<br /><br /><h3 style="text-align: left;">Install '<a href="https://github.com/nschum/compile-bookmarks.el" target="_blank">compile-bookmarks</a>' in Emacs</h3>This package allow keeping 'compile' commands like bookmarks, and executing them with keyboard shortcuts. It's more useful than one might think at first. I do all sort of tasks as compile-commands in Emacs like running unit-tests.<br /><br />Create a bookmark with a compile command like following:<br /><blockquote class="tr_bq">/path/to/firefox-addon-sdk/bin/cfx xpi &amp;&amp; wget --post-file=myAddon.xpi http://localhost:8888/</blockquote>When we provide complete path of the 'cfx' command, we don't need to activate the 'virtualenv'. <br /><br />You can do this by<br /><ul style="text-align: left;"><li>run 'compile' function (M-x compile)</li></ul><ul style="text-align: left;"><li>execute above mentioned command from mini-buffer<br />&nbsp;</li><li>Select 'add' from 'compile' menu. The command you used previously for compiling will appear there, select it</li></ul><ul style="text-align: left;"><li>It will then prompt in mini-buffer for a key to use for compiling with above command</li></ul><ul style="text-align: left;"><li>Choose whichever seem right to you. I have chosen 'f' for this.</li></ul>You can now run build and install your extension in firefox with keys 'C-` f'.<br /><br />This was the workflow I came up with developing my one firefox addon. I would love to hear how experts do things. If you have time, please tell in comments your way of doing things.</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 things I frequently do and forget with git]]></title>
    <link href="http://\.github.io/\/github/2014/01/5-things-i-frequently-do-and-forget.html"/>
    <updated>2014-01-08T00:00:00+05:30</updated>
    <id>http://\.github.io/\/github/2014/01/5-things-i-frequently-do-and-forget</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Here are few things I used to do a lot in my starting days with git and then forgot to re-search them when needed next time. These tips are from my notes. <br /><br /><h3 style="text-align: left;">How to undo the last Git commit?</h3>There are two scenarios in this case, and hence two ways to achieve our goal.<br /><h4 style="text-align: left;">Hard Reset - Completely undo the last commit and all the changes it made.</h4><blockquote class="tr_bq">git reset --hard HEAD~1</blockquote>Imagine the state of the tree is as following:<br /><br /><blockquote>&nbsp;&nbsp; (F)<br />A-B-C<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ↑<br />&nbsp; master</blockquote><br /><!-- more --><br /><br />where (F) is the current state of files and 'C' is the commit we want to undo. The above command completely removes the last commit along with all the changes involved in the commit. The new state of the tree is like this:<br /><br /><blockquote class="tr_bq">&nbsp;(F)<br />A-B<br />&nbsp;&nbsp;&nbsp; ↑<br />master</blockquote><br /><br /><blockquote class="tr_bq"><b>What is HEAD?</b><br />We can think of the HEAD as the "current branch". HEAD is basically a pointer which points to the latest commit. When we switch branches with git checkout, the HEAD revision changes to point to the tip of the new branch.</blockquote><blockquote class="tr_bq"><b>What is HEAD~1?</b><br />It's kind of complicated to explain HEAD~1 without explaining HEAD^1.<br />HEAD^1&nbsp; means the first parent of the commit object. ^<n> means the <n>th parent.<br />HEAD~1 means the commit object that is the first generation grand-parent of the named commit object, following only the first parents. e.g <rev>~3 is equivalent to <rev>^^^ which is equivalent to <rev>^1^1^1.</rev></rev></rev></n></n></blockquote><h4 style="text-align: left;">Undo the commit but keep the changes</h4><blockquote class="tr_bq">git reset HEAD~1</blockquote>If we want to undo the last commit for some reason (like if we entered the wrong commit message or the commit was incomplete), we can use a soft reset on HEAD.<br />In this case, the tree structure changes to something like:<br /><br /><blockquote>&nbsp;&nbsp; (F)<br />A-B-C<br />&nbsp;&nbsp; ↑<br />master</blockquote><br /><b>What's happening?</b><br />In both cases, HEAD is just a pointer to the latest commit. When we do a git reset HEAD~1, we tell Git to move the HEAD pointer back one commit. But (unless we use --hard) we leave your files as they were. So now git status shows the changes you had checked into C. You haven't lost a thing!<br /><h3 style="text-align: left;">How to change the commit message of last commit</h3><blockquote class="tr_bq">git reset --soft HEAD~1</blockquote>Using this command we undo the last commit but keep the files as well as the index untouched. This means we can just recommit with no extra effort as a new commit with a new commit message.<br /><br /><b>What's happening here?</b><br />Same as first point. But it leaves the files as well as the index unchanged, so we just need to 'commit' again with a new commit message.<br /><h3 style="text-align: left;">How to get a commit back after 'reset --hard'</h3>In the first point, we undid the previous commit permanently(?). Sometimes (read often) it happens that we need the destroyed commit back. Following commands can be used to resurrect the destroyed commit.<br /><blockquote class="tr_bq">git reflog </blockquote>This command shows a list of partial commit shas. We need to choose the commit we want to restore from this list and use following command.<br /><blockquote class="tr_bq">git checkout -b someNewBranchName shaOfDestroyedCommit</blockquote>This will create a new branch and restore the destroyed commit in it, which we can re-merge as required.<br /><br /><b>What's happening here?</b><br />Commits don't actually get destroyed in git for about 90 days. So usually we can go back and restore commits with method explained above.<br /><h3 style="text-align: left;">How to remove a git submodule?</h3><blockquote class="tr_bq">Git submodule?</blockquote>Submodules allow foreign repositories to be embedded within a dedicated subdirectory of the source tree, always pointed at a particular commit. Submodules are meant for different projects you would like to make part of your source tree, while the history of the two projects still stays completely independent and you cannot modify the contents of the submodule from within the main project.<br /><h4 style="text-align: left;">Removing a git submodule</h4>Git submodules can simply be removed with 'git rm', but that keeps the submodule entry intact in the .git/config and .gitmodules. There is actually an easier way to remove submodules with a single command.<br /><blockquote class="tr_bq">git submodule deinit <submodule name=""><br /></submodule></blockquote>This is in comprehension to 'git submodule init' command and does all the submodule removal work itself.<br /><h3 style="text-align: left;">How to delete a remote git branch?</h3>&nbsp;This one is easy. We just need one command to delete a remote branch.<br /><blockquote class="tr_bq">git push origin --delete <branchname><br /></branchname></blockquote>To remove a local branch, we can of course use<br /><blockquote class="tr_bq">git branch -d <localbranch><br /></localbranch></blockquote><br /></div></div>

]]></content>
  </entry>
  
</feed>
